@using AssetTrackerWebsite.Pages.Login
@using AssetTrackerWebsite.Services
@inherits LayoutComponentBase
@inject IDialogService DialogService
@inject AssetTrackerAuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider @bind-IsDarkMode="@_isDarkTheme" Theme="_theme" />
<MudSnackbarProvider />
<MudDialogProvider 
    CloseOnEscapeKey="true"
    CloseButton="true"
    DisableBackdropClick="true" />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Star Citizen Asset Tracker</MudText>
        <MudSpacer />
        @if (_isDarkTheme)
        {
            <MudIconButton Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" OnClick="@ToggleDarkMode" Title="Toggle Light Theme" />
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit" OnClick="@ToggleDarkMode" Title="Toggle Dark Theme" />
        }
        <AuthorizeView>
            <Authorized>
                <MudText Typo="Typo.body1">Welcome @_userName</MudText>
                <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <ActivatorContent>
                        <MudAvatar Color="Color.Success" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle"/>
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="OnLogout" OnTouch="OnLogout">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Size="Size.Medium" Color="Color.Tertiary"/>
                            Logout
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>

            <NotAuthorized>
                <MudMenu AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomLeft">
                    <ActivatorContent>
                        <MudAvatar Color="Color.Error" Variant="Variant.Filled">
                            <MudIcon Icon="@Icons.Material.Filled.AccountCircle"/>
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="OnLogin" OnTouch="OnLogin">
                            <MudIcon Class="mt-n1 mx-2" Icon="@Icons.Material.Filled.Login" Size="Size.Medium" Color="Color.Secondary" />
                            Login
                        </MudMenuItem>
                        <MudMenuItem OnClick="OnSignUp" OnTouch="OnSignUp"> 
                            <MudIcon Class="mt-n2 mx-2" Icon="@Icons.Material.Filled.Login" Size="Size.Medium" Color="Color.Primary" />
                            Sign up
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Breakpoint="Breakpoint.Always" Variant="DrawerVariant.Mini" OpenMiniOnHover="true">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private MudTheme _theme = new();
    private bool _isDarkTheme;
    private string _userName => AuthenticationStateProvider.CurrentUser.Username;
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    void ToggleDarkMode()
    {
        _isDarkTheme = !_isDarkTheme;
    }

    // TODO: Create Dialogs for Login and Sign Up
    private async Task OnLogin()
    {
        var dialog = DialogService.Show<LoginDialog>();
        var result = await dialog.Result;

        if (String.Equals(result.Data.ToString(), "Register"))
        {
            await OnSignUp();
        }
    }

    private async Task OnSignUp()
    {
        var dialog = DialogService.Show<RegisterDialog>();
        var result = await dialog.Result;

        if (String.Equals(result.Data.ToString(), "Login"))
        {
            await OnLogin();
        }
    }

    private Task OnLogout()
    {
        // TODO: Implement Logout Service
        // AuthenticationStateProvider.Logout();
        // NavigationManager.NavigateTo("/");
        // Logout with Delete Token from SessionStorage and Token from LocalStorage
        // Logout with StateHas Changed 
        throw new NotImplementedException();
    }

}
<style>
    .blurryBackground {
        backdrop-filter: blur(10px);
    }
</style>